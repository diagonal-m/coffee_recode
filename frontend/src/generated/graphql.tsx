import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type CoffeeBean = {
  __typename?: 'CoffeeBean';
  country?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  evaluation?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  processing?: Maybe<Scalars['String']>;
  roastLevel?: Maybe<Scalars['Int']>;
  store?: Maybe<Store>;
  storeId?: Maybe<Scalars['Int']>;
  tasting?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  userId: Scalars['Int'];
  varietal?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateCoffeeBean */
export type CreateCoffeeBeanInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  evaluation?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  processing?: InputMaybe<Scalars['String']>;
  roastLevel?: InputMaybe<Scalars['Int']>;
  station?: InputMaybe<Scalars['String']>;
  store: Scalars['String'];
  tasting?: InputMaybe<Scalars['String']>;
  varietal?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCoffeeBean */
export type CreateCoffeeBeanPayload = {
  __typename?: 'CreateCoffeeBeanPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  coffeeBean?: Maybe<CoffeeBean>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createCoffeeBean?: Maybe<CreateCoffeeBeanPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationCreateCoffeeBeanArgs = {
  input: CreateCoffeeBeanInput;
};

export type Query = {
  __typename?: 'Query';
  currentUser?: Maybe<User>;
  myBeans: Array<CoffeeBean>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};

export type Store = {
  __typename?: 'Store';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  station: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  userId: Scalars['Int'];
};

export type User = {
  __typename?: 'User';
  allowPasswordChange?: Maybe<Scalars['Boolean']>;
  confirmationSentAt?: Maybe<Scalars['ISO8601DateTime']>;
  confirmationToken?: Maybe<Scalars['String']>;
  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt: Scalars['ISO8601DateTime'];
  email?: Maybe<Scalars['String']>;
  encryptedPassword: Scalars['String'];
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  provider: Scalars['String'];
  rememberCreatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  resetPasswordSentAt?: Maybe<Scalars['ISO8601DateTime']>;
  resetPasswordToken?: Maybe<Scalars['String']>;
  tokens?: Maybe<Scalars['String']>;
  uid: Scalars['String'];
  unconfirmedEmail?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type CreateCoffeeBeanMutationVariables = Exact<{
  name: Scalars['String'];
  processing: Scalars['String'];
  country: Scalars['String'];
  varietal: Scalars['String'];
  roast_level: Scalars['Int'];
  tasting: Scalars['String'];
  evaluation: Scalars['Int'];
  store: Scalars['String'];
  station: Scalars['String'];
}>;


export type CreateCoffeeBeanMutation = { __typename?: 'Mutation', createCoffeeBean?: { __typename?: 'CreateCoffeeBeanPayload', coffeeBean?: { __typename?: 'CoffeeBean', id: string, name: string, processing?: string | null, country?: string | null, varietal?: string | null, roastLevel?: number | null, tasting?: string | null, evaluation?: number | null, store?: { __typename?: 'Store', name: string, station: string } | null } | null } | null };

export type MyBeansQueryVariables = Exact<{ [key: string]: never; }>;


export type MyBeansQuery = { __typename?: 'Query', myBeans: Array<{ __typename?: 'CoffeeBean', id: string, name: string, processing?: string | null, country?: string | null, varietal?: string | null, roastLevel?: number | null, tasting?: string | null, evaluation?: number | null, store?: { __typename?: 'Store', name: string, station: string } | null }> };


export const CreateCoffeeBeanDocument = gql`
    mutation createCoffeeBean($name: String!, $processing: String!, $country: String!, $varietal: String!, $roast_level: Int!, $tasting: String!, $evaluation: Int!, $store: String!, $station: String!) {
  createCoffeeBean(
    input: {name: $name, processing: $processing, country: $country, varietal: $varietal, roastLevel: $roast_level, tasting: $tasting, evaluation: $evaluation, store: $store, station: $station}
  ) {
    coffeeBean {
      id
      name
      processing
      country
      varietal
      roastLevel
      tasting
      evaluation
      store {
        name
        station
      }
    }
  }
}
    `;
export type CreateCoffeeBeanMutationFn = Apollo.MutationFunction<CreateCoffeeBeanMutation, CreateCoffeeBeanMutationVariables>;

/**
 * __useCreateCoffeeBeanMutation__
 *
 * To run a mutation, you first call `useCreateCoffeeBeanMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCoffeeBeanMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCoffeeBeanMutation, { data, loading, error }] = useCreateCoffeeBeanMutation({
 *   variables: {
 *      name: // value for 'name'
 *      processing: // value for 'processing'
 *      country: // value for 'country'
 *      varietal: // value for 'varietal'
 *      roast_level: // value for 'roast_level'
 *      tasting: // value for 'tasting'
 *      evaluation: // value for 'evaluation'
 *      store: // value for 'store'
 *      station: // value for 'station'
 *   },
 * });
 */
export function useCreateCoffeeBeanMutation(baseOptions?: Apollo.MutationHookOptions<CreateCoffeeBeanMutation, CreateCoffeeBeanMutationVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useMutation<CreateCoffeeBeanMutation, CreateCoffeeBeanMutationVariables>(CreateCoffeeBeanDocument, options);
      }
export type CreateCoffeeBeanMutationHookResult = ReturnType<typeof useCreateCoffeeBeanMutation>;
export type CreateCoffeeBeanMutationResult = Apollo.MutationResult<CreateCoffeeBeanMutation>;
export type CreateCoffeeBeanMutationOptions = Apollo.BaseMutationOptions<CreateCoffeeBeanMutation, CreateCoffeeBeanMutationVariables>;
export const MyBeansDocument = gql`
    query myBeans {
  myBeans {
    id
    name
    processing
    country
    varietal
    roastLevel
    tasting
    evaluation
    store {
      name
      station
    }
  }
}
    `;

/**
 * __useMyBeansQuery__
 *
 * To run a query within a React component, call `useMyBeansQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyBeansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyBeansQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyBeansQuery(baseOptions?: Apollo.QueryHookOptions<MyBeansQuery, MyBeansQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyBeansQuery, MyBeansQueryVariables>(MyBeansDocument, options);
      }
export function useMyBeansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyBeansQuery, MyBeansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyBeansQuery, MyBeansQueryVariables>(MyBeansDocument, options);
        }
export type MyBeansQueryHookResult = ReturnType<typeof useMyBeansQuery>;
export type MyBeansLazyQueryHookResult = ReturnType<typeof useMyBeansLazyQuery>;
export type MyBeansQueryResult = Apollo.QueryResult<MyBeansQuery, MyBeansQueryVariables>;