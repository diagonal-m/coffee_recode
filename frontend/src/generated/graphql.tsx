import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
const defaultOptions = {} as const;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type CoffeeBean = {
  __typename?: 'CoffeeBean';
  createdAt: Scalars['ISO8601DateTime'];
  evaluation?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  processing?: Maybe<Scalars['String']>;
  store?: Maybe<Scalars['String']>;
  tasting?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  userId: Scalars['Int'];
};

/** Autogenerated input type of CreateCoffeeBean */
export type CreateCoffeeBeanInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>;
  evaluation?: InputMaybe<Scalars['Int']>;
  name: Scalars['String'];
  processing?: InputMaybe<Scalars['String']>;
  store?: InputMaybe<Scalars['String']>;
  tasting?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of CreateCoffeeBean */
export type CreateCoffeeBeanPayload = {
  __typename?: 'CreateCoffeeBeanPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  coffeeBean?: Maybe<CoffeeBean>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createCoffeeBean?: Maybe<CreateCoffeeBeanPayload>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};


export type MutationCreateCoffeeBeanArgs = {
  input: CreateCoffeeBeanInput;
};

export type Query = {
  __typename?: 'Query';
  currentUser?: Maybe<User>;
  myBeans?: Maybe<Array<CoffeeBean>>;
  /** An example field added by the generator */
  testField: Scalars['String'];
};

export type User = {
  __typename?: 'User';
  allowPasswordChange?: Maybe<Scalars['Boolean']>;
  confirmationSentAt?: Maybe<Scalars['ISO8601DateTime']>;
  confirmationToken?: Maybe<Scalars['String']>;
  confirmedAt?: Maybe<Scalars['ISO8601DateTime']>;
  createdAt: Scalars['ISO8601DateTime'];
  email?: Maybe<Scalars['String']>;
  encryptedPassword: Scalars['String'];
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  provider: Scalars['String'];
  rememberCreatedAt?: Maybe<Scalars['ISO8601DateTime']>;
  resetPasswordSentAt?: Maybe<Scalars['ISO8601DateTime']>;
  resetPasswordToken?: Maybe<Scalars['String']>;
  tokens?: Maybe<Scalars['String']>;
  uid: Scalars['String'];
  unconfirmedEmail?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type MyBeansQueryVariables = Exact<{ [key: string]: never; }>;


export type MyBeansQuery = { __typename?: 'Query', myBeans?: Array<{ __typename?: 'CoffeeBean', id: string, name: string, processing?: string | null, tasting?: string | null, evaluation?: number | null, store?: string | null }> | null };


export const MyBeansDocument = gql`
    query myBeans {
  myBeans {
    id
    name
    processing
    tasting
    evaluation
    store
  }
}
    `;

/**
 * __useMyBeansQuery__
 *
 * To run a query within a React component, call `useMyBeansQuery` and pass it any options that fit your needs.
 * When your component renders, `useMyBeansQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useMyBeansQuery({
 *   variables: {
 *   },
 * });
 */
export function useMyBeansQuery(baseOptions?: Apollo.QueryHookOptions<MyBeansQuery, MyBeansQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<MyBeansQuery, MyBeansQueryVariables>(MyBeansDocument, options);
      }
export function useMyBeansLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyBeansQuery, MyBeansQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<MyBeansQuery, MyBeansQueryVariables>(MyBeansDocument, options);
        }
export type MyBeansQueryHookResult = ReturnType<typeof useMyBeansQuery>;
export type MyBeansLazyQueryHookResult = ReturnType<typeof useMyBeansLazyQuery>;
export type MyBeansQueryResult = Apollo.QueryResult<MyBeansQuery, MyBeansQueryVariables>;